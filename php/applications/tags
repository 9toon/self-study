!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Application	core/Application.php	/^abstract class Application$/;"	c
ClassLoader	core/ClassLoader.php	/^class ClassLoader$/;"	c
Controller	core/Controller.php	/^abstract class Controller$/;"	c
DbManager	core/DbManager.php	/^class DbManager$/;"	c
DbRepository	core/DbRepository.php	/^abstract class DbRepository$/;"	c
HttpNotFoundException	core/HttpNotFoundException.php	/^class HttpNotFoundException extends Exception{};$/;"	c
MiniBlogApplication	MiniBlogApplication.php	/^class MiniBlogApplication extends Application$/;"	c
Request	core/Request.php	/^class Request$/;"	c
Response	core/Response.php	/^class Response$/;"	c
Router	core/Router.php	/^class Router$/;"	c
Session	core/Session.php	/^class Session$/;"	c
UnauthorizedActionException	core/UnauthorizedActionException.php	/^class UnauthorizedActionException extends Exception {};$/;"	c
View	core/View.php	/^class View$/;"	c
_SESSION	core/Session.php	/^        $_SESSION = array();$/;"	v
__construct	core/Application.php	/^    public function __construct($debug = false)$/;"	f
__construct	core/Controller.php	/^    public function __construct($application)$/;"	f
__construct	core/DbRepository.php	/^    public function __construct($con)$/;"	f
__construct	core/Router.php	/^    public function __construct($definitions)$/;"	f
__construct	core/Session.php	/^    public function __construct()$/;"	f
__construct	core/View.php	/^    public function __construct($base_dir, $defaults = array())$/;"	f
__destruct	core/DbManager.php	/^    public function __destruct()$/;"	f
_file	core/View.php	/^        $_file = $this->base_dir . '\/' . $_path . '.php';$/;"	v
_variables	core/View.php	/^    public function render($_path, $_variables = array(), $_layout = false)$/;"	v
action	core/Application.php	/^            $action = $params['action'];$/;"	v
action_method	core/Controller.php	/^        $action_method = $action . 'Action';$/;"	v
action_name	core/Controller.php	/^        $this->action_name = $action;$/;"	v
action_name	core/Controller.php	/^    protected $action_name;$/;"	v
app	web/index.php	/^$app = new MiniBlogApplication(false);$/;"	v
app	web/index_dev.php	/^$app = new MiniBlogApplication(true);$/;"	v
application	core/Controller.php	/^        $this->application = $application;$/;"	v
application	core/Controller.php	/^    protected $application;$/;"	v
auth_actions	core/Controller.php	/^    protected $auth_actions = array();$/;"	v
base_dir	core/View.php	/^        $this->base_dir = $base_dir;$/;"	v
base_dir	core/View.php	/^    protected $base_dir;$/;"	v
base_url	core/Controller.php	/^            $base_url = $this->request->getBaseUrl();$/;"	v
base_url	core/Request.php	/^        $base_url = $this->getBaseUrl();$/;"	v
checkCsrfToken	core/Controller.php	/^    protected function checkCsrfToken($form_name, $token)$/;"	f
clear	core/Session.php	/^    public function clear()$/;"	f
compileRoutes	core/Router.php	/^    public function compileRoutes($definitions)$/;"	f
con	core/DbManager.php	/^            $con = $this->getConnection($name);$/;"	v
con	core/DbManager.php	/^            $con = $this->getConnection();$/;"	v
con	core/DbManager.php	/^            $con = $this->getConnectionForRepository($repository_name);$/;"	v
con	core/DbManager.php	/^        $con = new PDO($/;"	v
con	core/DbRepository.php	/^        $this->con = $con;$/;"	v
con	core/DbRepository.php	/^    protected $con;$/;"	v
configure	MiniBlogApplication.php	/^    protected function configure()$/;"	f
configure	core/Application.php	/^    protected function configure()$/;"	f
connect	core/DbManager.php	/^    public function connect($name, $params)$/;"	f
connections	core/DbManager.php	/^    protected $connections = array();$/;"	v
content	core/Application.php	/^        $content = $controller->run($action, $params);$/;"	v
content	core/Controller.php	/^        $content = $this->action_method($params);$/;"	v
content	core/Response.php	/^        $this->content = $content;$/;"	v
content	core/Response.php	/^    protected $content;$/;"	v
content	core/View.php	/^            $content = $this->render($_layout, $/;"	v
content	core/View.php	/^        $content = ob_get_clean();$/;"	v
controller	core/Application.php	/^            $controller = $params['controller'];$/;"	v
controller	core/Application.php	/^        $controller = $this->findController($controller_class);$/;"	v
controller_class	core/Application.php	/^        $controller_class = ucfirst($controller_name) . 'Controller';$/;"	v
controller_file	core/Application.php	/^            $controller_file = $this->getControllerDir() . '\/' . $controller_class . '.php';$/;"	v
controller_name	core/Controller.php	/^        $this->controller_name = strtolower(substr(get_class($this), 0, -10));$/;"	v
controller_name	core/Controller.php	/^    protected $controller_name;$/;"	v
db_manager	core/Application.php	/^        $this->db_manager = new DbManager();$/;"	v
db_manager	core/Application.php	/^    protected $db_manager;$/;"	v
db_manager	core/Controller.php	/^        $this->db_manager = $application->getDbManager();$/;"	v
db_manager	core/Controller.php	/^    protected $db_manager;$/;"	v
debug	core/Application.php	/^            $this->debug = false;$/;"	v
debug	core/Application.php	/^            $this->debug = true;$/;"	v
debug	core/Application.php	/^    protected $debug = false;$/;"	v
default	core/Request.php	/^    public function getGet($name, $default = null)$/;"	v
default	core/Request.php	/^    public function getPost($name, $default = null)$/;"	v
default	core/Session.php	/^    public function get($name, $default = null)$/;"	v
default	core/View.php	/^        $this->default = $defaults;$/;"	v
defaults	core/Controller.php	/^        $defaults = array($/;"	v
defaults	core/View.php	/^    protected $defaults;$/;"	v
defaults	core/View.php	/^    public function __construct($base_dir, $defaults = array())$/;"	v
dirs	core/ClassLoader.php	/^    protected $dirs;$/;"	v
escape	core/View.php	/^    public function escape($string)$/;"	f
execute	core/DbRepository.php	/^    public function execute($sql, $params = array())$/;"	f
fetch	core/DbRepository.php	/^    public function fetch($sql, $params = array()) $/;"	f
fetchAll	core/DbRepository.php	/^    public function fetchAll($sql, $params = array())$/;"	f
file	core/ClassLoader.php	/^            $file = $dir . '\/' . $class . '.php';$/;"	v
findController	core/Application.php	/^    protected function findController($controller_class)$/;"	f
forward404	core/Controller.php	/^    protected function forward404()$/;"	f
generateCsrfToken	core/Controller.php	/^    protected function generateCsrfToken($form_name)$/;"	f
get	core/DbManager.php	/^    public function get($repository_name)$/;"	f
get	core/Session.php	/^    public function get($name, $default = null)$/;"	f
getBaseUrl	core/Request.php	/^    public function getBaseUrl()$/;"	f
getConnection	core/DbManager.php	/^    public function getConnection($name = null)$/;"	f
getConnectionForRepository	core/DbManager.php	/^    public function getConnectionForRepository($repository_name)$/;"	f
getControllerDir	core/Application.php	/^    public function getControllerDir()$/;"	f
getDbManager	core/Application.php	/^    public function getDbManager()$/;"	f
getGet	core/Request.php	/^    public function getGet($name, $default = null)$/;"	f
getHost	core/Request.php	/^    public function getHost()$/;"	f
getModelDir	core/Application.php	/^    public function getModelDir()$/;"	f
getPathInfo	core/Request.php	/^    public function getPathInfo()$/;"	f
getPost	core/Request.php	/^    public function getPost($name, $default = null)$/;"	f
getRequest	core/Application.php	/^    public function getRequest()$/;"	f
getRequestUri	core/Request.php	/^    public function getRequestUri()$/;"	f
getResponse	core/Application.php	/^    public function getResponse()$/;"	f
getRootDir	MiniBlogApplication.php	/^    public function getRootDir()$/;"	f
getRootDir	core/Application.php	/^    abstract public function getRootDir();$/;"	f
getSession	core/Application.php	/^    public function getSession()$/;"	f
getViewDir	core/Application.php	/^    public function getViewDir()$/;"	f
getWebDir	core/Application.php	/^    public function getWebDir()$/;"	f
host	core/Controller.php	/^            $host = $this->request->getHost();$/;"	v
http_headers	core/Response.php	/^    protected $http_headers = array();$/;"	v
i	core/Router.php	/^            foreach ($tokens as $i => $token) {$/;"	v
initialize	core/Application.php	/^    protected function initialize()$/;"	f
isAuthenticated	core/Session.php	/^    public function isAuthenticated()$/;"	f
isDebugMode	core/Application.php	/^    public function isDebugMode()$/;"	f
isPost	core/Request.php	/^    public function isPost()$/;"	f
isSsl	core/Request.php	/^    public function isSsl()$/;"	f
key	core/Controller.php	/^        $key = 'csrf_tokens\/' . $form_name;$/;"	v
layout_variables	core/View.php	/^    protected $layout_variables = array();$/;"	v
loadClass	core/ClassLoader.php	/^    public function loadClass($class)$/;"	f
loader	bootstrap.php	/^$loader = new ClassLoader();$/;"	v
login_action	MiniBlogApplication.php	/^    protected $login_action = array('account', 'signin');$/;"	v
login_action	core/Application.php	/^    protected $login_action = array();$/;"	v
message	core/Application.php	/^        $message = $this->isDebugMode() ? $e->getMessage() : 'Page not found.';$/;"	v
message	core/Application.php	/^        $message = htmlspecialchars($message, ENT_QUOTES, 'UTF-8');$/;"	v
name	core/DbManager.php	/^            $name = $this->repository_connection_map[$repository_name];$/;"	v
name	core/Response.php	/^        foreach ($this->http_headers as $name => $value) {$/;"	v
name	core/Router.php	/^                    $name = substr($token, 1);   \/\/ e.g $name = 'hoge'$/;"	v
needsAuthentication	core/Controller.php	/^    protected function needsAuthentication($action)$/;"	f
params	core/Application.php	/^            $params = $this->router->resolve($this->request->getPathInfo());$/;"	v
params	core/Application.php	/^    public function runAction($controller_name, $action, $params = array())$/;"	v
params	core/Controller.php	/^    public function run($action, $params = array())$/;"	v
params	core/DbManager.php	/^        $params = array_merge(array($/;"	v
params	core/DbRepository.php	/^    public function execute($sql, $params = array())$/;"	v
params	core/DbRepository.php	/^    public function fetch($sql, $params = array()) $/;"	v
params	core/DbRepository.php	/^    public function fetchAll($sql, $params = array())$/;"	v
params	core/Router.php	/^                $params = array_merge($params, $matches);$/;"	v
path	core/Controller.php	/^        $path = $this->controller_name . '\/' . $template;$/;"	v
path_info	core/Request.php	/^        $path_info = (string)substr($request_uri, strlen($base_url));$/;"	v
path_info	core/Router.php	/^            $path_info = '\/' . $path_info;$/;"	v
pattern	core/Router.php	/^            $pattern = '\/' . implode('\/', $tokens);$/;"	v
pattern	core/Router.php	/^        foreach ($this->routes as $pattern => $params) {$/;"	v
protocol	core/Controller.php	/^            $protocol = $this->request->isSsl() ? 'https:\/\/' : 'http:\/\/';$/;"	v
redirect	core/Controller.php	/^    protected function redirect($url)$/;"	f
regenerate	core/Session.php	/^    public function regenerate($destroy = true)$/;"	f
register	core/ClassLoader.php	/^    public function register()$/;"	f
registerDir	core/ClassLoader.php	/^    public function registerDir($dir)$/;"	f
registerRoutes	MiniBlogApplication.php	/^   protected function registerRoutes()$/;"	f
registerRoutes	core/Application.php	/^    abstract protected function registerRoutes();$/;"	f
remove	core/Session.php	/^    public function remove($name)$/;"	f
render	core/Controller.php	/^    protected function render($variables = array(), $template = null, $layout = 'layout')$/;"	f
render	core/View.php	/^    public function render($_path, $_variables = array(), $_layout = false)$/;"	f
render404Page	core/Application.php	/^    protected function render404Page($e)$/;"	f
repositories	core/DbManager.php	/^    protected $repositories = array();$/;"	v
repository	core/DbManager.php	/^            $repository = new $repository_class($con);$/;"	v
repository_class	core/DbManager.php	/^            $repository_class = $repository_name . 'Repository';$/;"	v
repository_connection_map	core/DbManager.php	/^    protected $repository_connection_map = array();$/;"	v
request	core/Application.php	/^        $this->request = new Request();$/;"	v
request	core/Application.php	/^    protected $request;$/;"	v
request	core/Controller.php	/^        $this->request = $application->getRequest();$/;"	v
request	core/Controller.php	/^    protected $request;$/;"	v
request_uri	core/Request.php	/^            $request_uri = substr($request_uri, 0, $pos);$/;"	v
request_uri	core/Request.php	/^        $request_uri = $this->getRequestUri();$/;"	v
resolve	core/Router.php	/^    public function resolve($path_info)$/;"	f
response	core/Application.php	/^        $this->response = new Response();$/;"	v
response	core/Application.php	/^    protected $response;$/;"	v
response	core/Controller.php	/^        $this->response = $application->getRespose();$/;"	v
response	core/Controller.php	/^    protected $response;$/;"	v
router	core/Application.php	/^        $this->router = new Router($this->registerRoutes());$/;"	v
routes	core/Router.php	/^        $routes = array();$/;"	v
routes	core/Router.php	/^        $this->routes = $this->compileRoutes($definitions);$/;"	v
routes	core/Router.php	/^    protected $routes;$/;"	v
run	core/Application.php	/^    public function run()$/;"	f
run	core/Controller.php	/^    public function run($action, $params = array())$/;"	f
runAction	core/Application.php	/^    public function runAction($controller_name, $action, $params = array())$/;"	f
script_name	core/Request.php	/^        $script_name = $_SERVER['SCRIPT_NAME'];$/;"	v
send	core/Response.php	/^    public function send()$/;"	f
session	core/Application.php	/^        $this->session = new Session();$/;"	v
session	core/Application.php	/^    protected $session;$/;"	v
session	core/Controller.php	/^        $this->session = $application->getSession();$/;"	v
session	core/Controller.php	/^    protected $session;$/;"	v
sessionIdRegenerated	core/Session.php	/^    protected static $sessionIdRegenerated = false;$/;"	v
sessionStarted	core/Session.php	/^    protected static $sessionStarted = false;$/;"	v
set	core/Session.php	/^    public function set($name, $value)$/;"	f
setAuthenticated	core/Session.php	/^    public function setAuthenticated($bool)$/;"	f
setConnection	core/DbRepository.php	/^    public function setConnection($con)$/;"	f
setContent	core/Response.php	/^    public function setContent($content)$/;"	f
setDebugMode	core/Application.php	/^    protected function setDebugMode($debug)$/;"	f
setHttpHeader	core/Response.php	/^    public function setHttpHeader($name, $value)$/;"	f
setLayoutVar	core/View.php	/^    public function setLayoutVar($name, $value)$/;"	f
setRepositoryConnectionMap	core/DbManager.php	/^    public function setRepositoryConnectionMap($repository_name, $name)$/;"	f
setStatusCode	core/Response.php	/^    public function setStatusCode($status_code, $status_text = '')$/;"	f
status_code	core/Response.php	/^        $this->status_code = $status_code;$/;"	v
status_code	core/Response.php	/^    protected $status_code = 200;$/;"	v
status_text	core/Response.php	/^        $this->status_text = $status_text;$/;"	v
status_text	core/Response.php	/^    protected $status_text = 'OK';$/;"	v
status_text	core/Response.php	/^    public function setStatusCode($status_code, $status_text = '')$/;"	v
stmt	core/DbRepository.php	/^        $stmt = $this->con->prepare($sql);$/;"	v
template	core/Controller.php	/^            $template = $this->action_name;$/;"	v
template	core/Controller.php	/^    protected function render($variables = array(), $template = null, $layout = 'layout')$/;"	v
token	core/Controller.php	/^        $token = sha1($form_name . session_id() . microtime());$/;"	v
token	core/Router.php	/^                    $token = '(?P<' . $nmae . '>[^\/]+)'; \/\/ e.g $token = '(?P<hoge>[^\/]+)'$/;"	v
token	core/Router.php	/^                if (0 === strpos($token, ':')) { \/\/ e.g $token = ':hoge'$/;"	v
tokens	core/Controller.php	/^        $tokens = $this->session->get($key, array());$/;"	v
tokens	core/Router.php	/^            $tokens = explode('\/', ltrim($url, '\/'));$/;"	v
url	core/Controller.php	/^            $url = $protocol . $host . $base_url . $url;$/;"	v
url	core/Router.php	/^        foreach ($definitions as $url => $params) {$/;"	v
view	core/Controller.php	/^        $view = new View($this->application->getViewDir(), $defaults);$/;"	v
